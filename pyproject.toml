[tool.poetry]
name = "ensi"
version = "0.1.0"
description = ""
authors = ["rodrigo.goncalves <ro.go.calves@gmail.com>"]
readme = "README.md"

[tool.poetry.dependencies]
python = ">=3.11,<3.13"
requests = "^2.32.4"
beautifulsoup4 = "^4.13.4"
lxml = "^6.0.0"

[tool.poetry.group.dev.dependencies]
pytest = "^8.4.1"
pytest-cov = "^6.2.1"
blue = "^0.9.1"
isort = "^6.0.1"
taskipy = "^1.14.1"


[tool.poetry.group.doc.dependencies]
jinja2 = "^3.1.6"
mkdocs = "^1.6.1"
mkdocs-material-extensions = "^1.3.1"
pymdown-extensions = "^10.16.1"
mkdocs-material = "^9.6.16"
mkdocs-macros-plugin = "^1.3.7"
mkdocstrings = "^0.30.0"
mkdocstrings-python = "^1.16.12"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.pytest.ini_options]
pythonpath = "." #Caminho do projeto
addopts = "--doctest-modules" #Lê as docstrings

[tool.isort]
profile = "black"
line_length =  79 

[tool.taskipy.tasks]
lint = "blue --check --diff . && isort --check --diff ." # permite usar task lint e executar o comando
docs = "mkdocs serve" # Gera a documentação
pre_test = "task lint" # Antes da task test executa o comando
test = "pytest -s -x --cov=ensi -vv" # Task de teste 
                                               # s para permitir a saída de logs e prints durante a execução dos testes; 
                                               # -x para interromper a execução dos testes assim que um deles falhar; 
                                               # --cov=notas_musicais para gerar a cobertura de código da biblioteca;
                                               # -vv para exibir os resultados de cada teste de forma detalhada.
post_test = "coverage html" # Após a task test executa o comando